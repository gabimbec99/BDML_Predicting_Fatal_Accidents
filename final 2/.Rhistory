setwd("~/")
if(!require(pacman)) install.packages("pacman") ; require(pacman)
require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
caret) # Classification And REgression Training
## set seed
set.seed(0000)
## load data
df <- import("https://gitlab.com/Lectures-R/bd-meca-2022-summer/lecture-01/-/raw/main/data/GEIH_sample1.Rds")
db <- as_tibble(df) ## from dataframe to tibble
db <- as_tibble(df) ## from dataframe to tibble
head(db)
tail(db)
skim(db) %>% head()
summary(db$y_salary_m)
ggplot(data = db , mapping = aes(x = age , y = y_ingLab_m))
ggplot(data = db , mapping = aes(x = age , y = y_ingLab_m)) +
geom_point(col = "red" , size = 0.5)
ggplot(data = db ,
mapping = aes(x = age , y = y_ingLab_m , group=as.factor(formal) , color=as.factor(formal))) +
geom_point()
## density: income by sex
p <- ggplot(data=db) +
geom_histogram(mapping = aes(x=y_ingLab_m , group=as.factor(sex) , fill=as.factor(sex)))
p
p + scale_fill_manual(values = c("0"="red" , "1"="blue") , label = c("0"="Hombre" , "1"="Mujer") , name = "Sexo")
box_plot <- ggplot(data=db , mapping = aes(as.factor(estrato1) , totalHoursWorked)) +
geom_boxplot()
box_plot
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") , label = c("0"="Hombre" , "1"="Mujer") , name = "Sexo")
box_plot
## add theme
box_plot + theme_test()
h_hour = ggplot() + geom_histogram(data=db , aes(x=hoursWorkUsual) , fill="#99FF33" , alpha=0.5)
h_hour
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
b = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
BoxCoxTrans(db$y_ingLab_m)
BoxCoxTrans(db$y_ingLab_m , na.rm=T)
ggplot() + geom_boxplot(data=db ,aes(x=y_ingLab_m) , fill="darkblue" , alpha=0.5)
ggplot() + geom_boxplot(data=db ,aes(x=y_ingLab_m) , fill="darkblue" , alpha=0.5)
ggplot() + geom_boxplot(data=db ,aes(x=y_ingLab_m) , fill="darkblue" , alpha=0.5)
db <- db %>% mutate(log_ingLab_m=log(y_ingLab_m))
ggplot() + geom_histogram(data=db , aes(x=log_ingLab_m) , fill="coral1" , alpha=0.5)
quantile(x=db$p6426 , na.rm=T)
IQR(x=db$p6426 , na.rm=T)
iqr <- IQR(x=db$p6426 , na.rm=T)
db_out <- db %>% subset(p6426 <= 2*iqr | is.na(p6426)==T)
cat("¡Elimina las NA!")
quantile(x=db_out$p6426 , na.rm=T)
nrow(db) - nrow(db_out)
db = db %>%
mutate(p6426_out = ifelse(test = p6426 > 4*iqr,
yes = 1,
no = 0))
table(db$p6426_out)
q = quantile(db$p6426 , na.rm=T)
q
db = db %>%
mutate(p6426_q = case_when(p6426 < q[2] ~ "Q-1",
p6426 >= q[2] & p6426 < q[3] ~ "Q-2",
p6426 >= q[3] & p6426 < q[4] ~ "Q-3",
p6426 >= q[4] ~ "Q-4"))
table(db$p6426_q)
head(db)
db %>% select(-Var.1,-orden)
## select variable: by patter name
db %>% select(starts_with("p6"))
db %>% select(directorio,contains("salary"))
db %>% select_if(is.character)
db %>% select_if(is.character)
is.na(db$y_total_m) %>% table()
db %>% select(directorio,y_total_m) %>% tail()
db = db %>%
group_by(directorio) %>%
mutate(mean_y_total_m = mean(y_total_m,na.rm=T))
db %>% select(directorio,y_total_m,mean_y_total_m) %>% tail()
db = db %>%
mutate(y_total_m = ifelse(test = is.na(y_total_m)==T,
yes = mean_y_total_m,
no = y_total_m))
db %>% select(directorio,y_total_m,mean_y_total_m) %>% tail()
db_c = db %>% subset(is.na(y_total_m)==F)
nrow(db) - nrow(db_c)
is.na(db$y_total_m) %>% table()
db_c = db %>% dplyr::filter(is.na(y_total_m)==F)
require(pacman)
p_load(tidyverse, # contiene las librerías ggplot, dplyr...
rvest)
browseURL("https://fbref.com/es/robots.txt")
browseURL("https://fbref.com/robots.txt")
library(data.table)
library(fastmatch)
library(fastmatch)
lematizador( "des" ) # dar
require(pacman)
## llamar y/o instalar librerias
p_load(tidyverse,rio,skimr,
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
osmdata) ## packages with census data
c=""
z=str_extract_all("pez pescado pesado pelica",[Pp]e[a-z]+)
z=str_extract_all("pez pescado pesado pelica",[Pp]e[a-z]+))
z=str_extract_all("pez pescado pesado pelica",[Pp]e[a-z]+)
str_extract("pez pescado pesado pelicano",[Pp]e[a-z]+)
str_extract("pez pescado pesado pelicano","[Pp]e[a-z]+")
str_extract_all("pez pescado pesado pelicano","[Pp]e[a-z]+")
str_extract_all("pez pescado pesado pelicano","[Pp]e[a-z]?")
setwd("C:/Users/mrozo/Descargas")
require(pacman)
require(caret)
## llamar y/o instalar librerias
p_load(tidyverse,rio,skimr,
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
osmdata) ## packages with census data
library(kableExtra)
library(glmnet)
#######################################################################
########### Nota: En otro documento tengo todo lo que hice ############
############ para dejar base así, yo lo subo al GitHub después ########
#######################################################################
setwd("C:/Users/mrozo/Descargas")
wd
houses_train<-read_csv(file="houses_train_final.csv")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
houses_test<-read_csv(file="houses_test_finalf.csv")
## llamar pacman (contiene la función p_load)
require(pacman)
require(caret)
## llamar y/o instalar librerias
p_load(tidyverse,rio,skimr,
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
osmdata) ## packages with census data
library(kableExtra)
library(glmnet)
setwd("C:/Users/mrozo/Descargas")
houses_test<-read_csv(file="houses_test_finalf.csv")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
setwd("C:/Users/mrozo/Descargas")
rm(list=ls())
setwd("C:/Users/mrozo/Descargas")
getwd()
train<-read_csv(file="train.csv")
train<-read_csv(file="train.csv")
test<-read_csv(file="test.csv")
View(test)
View(train)
unique(train$name)
train<-read_csv(file="train.csv")
train<-read_csv(file="train.csv")
test<-read_csv(file="test.csv")
View(test)
View(train)
train<-read_csv(file="train.csv")
test<-read_csv(file="test.csv")
submission_template<-read_csv(file="submission_template.csv")
submission_template<-read_csv(file="sample_submission.csv")
write_excel(train,file="train.xslx")
library(xlsx)
library("xlsx")
library(openxlsx)
write.xlsx(train,file="train.xslx")
write.xlsx(test,file="test.xslx")
write.xlsx(submission_template,file="submission_template.xslx")
write_csv(train,file="atrain.csv")
write_csv(test,file="atest.csv")
write_csv(submission_template,file="asubmission_template.cvs")
library("haven")
write_dta(train,file="atrain.dta")
library("haven")
write_dta(train,file="atrain.dta")
write_dta(train)
tmp <- tempfile(fileext = ".dta")
write_dta(train, tmp)
write_dta(test,tmp)
write_dta(submission_template,tmp)
write.dta(train, file="train.dta")
write.dta(train, file="train.dta")
write_dta(train, "train.dta")
write_dta(test, "test.dta")
write_dta(submission_template, "submission_template.dta")
write_dta(train, "train.dta")
write_dta(test, "test.dta")
write_dta(submission_template, "submission_template.dta")
## llamar pacman (contiene la función p_load)
require(pacman)
require(caret)
## llamar y/o instalar librerias
p_load(tidyverse,rio,skimr,
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
osmdata) ## packages with census data
library(kableExtra)
library(glmnet)
#######################################################################
########### Nota: En otro documento tengo todo lo que hice ############
############ para dejar base así, yo lo subo al GitHub después ########
#######################################################################
rm(list=ls())
old<-read_csv(file="tweets_scrap(1).csv")
old<-read_csv(file="tweets_scrap (1).csv")
nuevo<-read_csv(file="tweets_scrap_segunda_iteracion.csv")
nuevo<-read_csv(file="tweets_scrap_segunda_iteracion.csv")
nuevo<-read_csv(file="tweets_scrap_segunda_iteracion.csv")
nuevo<-read_csv(delim=";",file="tweets_scrap_segunda_iteracion.csv")
nuevo<-read_csv(file="tweets_scrap_segunda_iteracion.csv", sep=";")
nuevo<-read.csv(file="tweets_scrap_segunda_iteracion.csv", sep=";")
write_dta(old, "old.dta")
library("haven")
write_dta(old, "old.dta")
old <- old[,-1]
write_dta(old, "old.dta")
write_dta(nuevo, "new.dta")
print(ifelse(old$id==536e3ac128e7888eedaef309, old$text))
ifelse(old$id=="536e3ac128e7888eedaef309", old$text,0)
old$id[957]
old$text[957]
ifelse(new$id=="536e3ac128e7888eedaef309", new$text,0)
ifelse(nuevo$id=="536e3ac128e7888eedaef309", nuevo$text,0)
ifelse(nuevo$text=="todo el cambio de gabinete no fue sino un enroque. mas de los mismo.", nuevo$id,0)
submission_template<-read_csv(file="sample_submission (1).csv")
submission_template <- mutate(submission_template, id = rownames(submission_template))
submission_template<-read_csv(file="sample_submission (1).csv")
submission_template <- mutate(submission_template, count = rownames(submission_template))
write_dta(submission_template, "submission_template_envios.dta")
test<-read_csv(file="test (1).csv")
test<-read_csv(file="test (1).csv")
write_dta(test, "test23.dta")
update()
update()
install.packages(c("bit", "bslib", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "curl", "data.table", "dials", "digest", "e1071", "evaluate", "future", "future.apply", "ggplot2", "ggstance", "glmnet", "globals", "gtools", "haven", "Hmisc", "htmltools", "huxtable", "infer", "installr", "isoband", "jpeg", "jsonlite", "jtools", "knitr", "lava", "lifecycle", "lintr", "lme4", "lubridate", "lwgeom", "mapproj", "maps", "maptools", "markdown", "MatchIt", "Matrix", "minqa", "modelr", "openssl", "openxlsx", "parsnip", "pkgload", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppEigen", "readr", "recipes", "rlang", "rmarkdown", "rsample", "Rttf2pt1", "s2", "sass", "sf", "slider", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tinytex", "tune", "units", "vctrs", "vroom", "webshot", "whisker", "wk", "workflows", "xfun", "XML", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "curl", "data.table", "dials", "digest", "e1071", "evaluate", "future", "future.apply", "ggplot2", "ggstance", "glmnet", "globals", "gtools", "haven", "Hmisc", "htmltools", "huxtable", "infer", "installr", "isoband", "jpeg", "jsonlite", "jtools", "knitr", "lava", "lifecycle", "lintr", "lme4", "lubridate", "lwgeom", "mapproj", "maps", "maptools", "markdown", "MatchIt", "Matrix", "minqa", "modelr", "openssl", "openxlsx", "parsnip", "pkgload", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppEigen", "readr", "recipes", "rlang", "rmarkdown", "rsample", "Rttf2pt1", "s2", "sass", "sf", "slider", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tinytex", "tune", "units", "vctrs", "vroom", "webshot", "whisker", "wk", "workflows", "xfun", "XML", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "curl", "data.table", "dials", "digest", "e1071", "evaluate", "future", "future.apply", "ggplot2", "ggstance", "glmnet", "globals", "gtools", "haven", "Hmisc", "htmltools", "huxtable", "infer", "installr", "isoband", "jpeg", "jsonlite", "jtools", "knitr", "lava", "lifecycle", "lintr", "lme4", "lubridate", "lwgeom", "mapproj", "maps", "maptools", "markdown", "MatchIt", "Matrix", "minqa", "modelr", "openssl", "openxlsx", "parsnip", "pkgload", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppEigen", "readr", "recipes", "rlang", "rmarkdown", "rsample", "Rttf2pt1", "s2", "sass", "sf", "slider", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tinytex", "tune", "units", "vctrs", "vroom", "webshot", "whisker", "wk", "workflows", "xfun", "XML", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "curl", "data.table", "dials", "digest", "e1071", "evaluate", "future", "future.apply", "ggplot2", "ggstance", "glmnet", "globals", "gtools", "haven", "Hmisc", "htmltools", "huxtable", "infer", "installr", "isoband", "jpeg", "jsonlite", "jtools", "knitr", "lava", "lifecycle", "lintr", "lme4", "lubridate", "lwgeom", "mapproj", "maps", "maptools", "markdown", "MatchIt", "Matrix", "minqa", "modelr", "openssl", "openxlsx", "parsnip", "pkgload", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppEigen", "readr", "recipes", "rlang", "rmarkdown", "rsample", "Rttf2pt1", "s2", "sass", "sf", "slider", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tinytex", "tune", "units", "vctrs", "vroom", "webshot", "whisker", "wk", "workflows", "xfun", "XML", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "curl", "data.table", "dials", "digest", "e1071", "evaluate", "future", "future.apply", "ggplot2", "ggstance", "glmnet", "globals", "gtools", "haven", "Hmisc", "htmltools", "huxtable", "infer", "installr", "isoband", "jpeg", "jsonlite", "jtools", "knitr", "lava", "lifecycle", "lintr", "lme4", "lubridate", "lwgeom", "mapproj", "maps", "maptools", "markdown", "MatchIt", "Matrix", "minqa", "modelr", "openssl", "openxlsx", "parsnip", "pkgload", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppEigen", "readr", "recipes", "rlang", "rmarkdown", "rsample", "Rttf2pt1", "s2", "sass", "sf", "slider", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tinytex", "tune", "units", "vctrs", "vroom", "webshot", "whisker", "wk", "workflows", "xfun", "XML", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "curl", "data.table", "dials", "digest", "e1071", "evaluate", "future", "future.apply", "ggplot2", "ggstance", "glmnet", "globals", "gtools", "haven", "Hmisc", "htmltools", "huxtable", "infer", "installr", "isoband", "jpeg", "jsonlite", "jtools", "knitr", "lava", "lifecycle", "lintr", "lme4", "lubridate", "lwgeom", "mapproj", "maps", "maptools", "markdown", "MatchIt", "Matrix", "minqa", "modelr", "openssl", "openxlsx", "parsnip", "pkgload", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppEigen", "readr", "recipes", "rlang", "rmarkdown", "rsample", "Rttf2pt1", "s2", "sass", "sf", "slider", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tinytex", "tune", "units", "vctrs", "vroom", "webshot", "whisker", "wk", "workflows", "xfun", "XML", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "curl", "data.table", "dials", "digest", "e1071", "evaluate", "future", "future.apply", "ggplot2", "ggstance", "glmnet", "globals", "gtools", "haven", "Hmisc", "htmltools", "huxtable", "infer", "installr", "isoband", "jpeg", "jsonlite", "jtools", "knitr", "lava", "lifecycle", "lintr", "lme4", "lubridate", "lwgeom", "mapproj", "maps", "maptools", "markdown", "MatchIt", "Matrix", "minqa", "modelr", "openssl", "openxlsx", "parsnip", "pkgload", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppEigen", "readr", "recipes", "rlang", "rmarkdown", "rsample", "Rttf2pt1", "s2", "sass", "sf", "slider", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tinytex", "tune", "units", "vctrs", "vroom", "webshot", "whisker", "wk", "workflows", "xfun", "XML", "yaml", "zip"))
base_final<-read_csv(file="base_final_proyecto (1).csv")
require(pacman)
require(caret)
## llamar y/o instalar librerias
p_load(tidyverse,rio,skimr,
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
osmdata) ## packages with census data
library(kableExtra)
library(glmnet)
library(magrittr)
library("caret")
base_final<-read_csv(file="base_final_proyecto (1).csv")
rm(list=ls())
setwd("C:/Users/mrozo/OneDrive - Universidad de los Andes/Maestría/Big Data/final")
base_final<-read_csv(file="base_final_proyecto (1).csv")
base_final <- subset(base_final, select = -c(PK_CALZADA,CODIGO_ACC, ANO_OCURRE, DIRECCION,PLACA,CIV,CODIGO.x, CODIGO_VEHICULO.x, CODIGO_ACCIDENTE,TIPO_CAUSA))
colSums(is.na(base_final))
#########################################################
#Día de la semana/ Semanas del Mes/ Mes/Día #############
#########################################################
library(lubridate)
base_final$dias_semana <- wday(base_final$fecha, week_start=1)
base_final %<>% mutate_at(c("dias_semana"), factor)
first_day_of_month_wday <- function(dx) {
day(dx) <- 1
wday(dx)
}
base_final$semanas_mes<-ceiling((day(base_final$fecha) + first_day_of_month_wday(base_final$fecha) - 1) / 7)
base_final %<>% mutate_at(c("semanas_mes"), factor)
base_final$mes<-month(base_final$fecha)
base_final %<>% mutate_at(c("mes"), factor)
base_final$dias <- day(base_final$fecha)
base_final <- subset(base_final, select = -c(FORMULARIO,fecha,NOMBRE,long,lat,geometry))
res <- hms(base_final$sunrise)        # format to 'hours:minutes:seconds'
base_final$sunrise<-hour(res)*60 + minute(res)       # convert hours to minutes, and add minutes
res <- hms(base_final$sunset)        # format to 'hours:minutes:seconds'
base_final$sunset<-hour(res)*60 + minute(res)       # convert hours to minutes, and add minutes
base_final$moonrise <- gsub(x=base_final$moonrise,pattern=" AM",replacement="",fixed=T)
base_final$moonset <- gsub(x=base_final$moonset,pattern=" PM",replacement="",fixed=T)
base_final$moonrise<-as.numeric(hm(base_final$moonrise)) /60
base_final$moonset<-(as.numeric(hm(base_final$moonset))/60)+ (60*12)
base_final <- base_final %>%
mutate(fatalidad = if_else(GRAVEDAD=="CON MUERTOS",1, 0))
base_final <- subset(base_final, select = -c(GRAVEDAD))
#########################################################
#Predicciones ###########################################
#########################################################
base_final_cat <- subset(base_final, select = c(CLASE_ACC,LOCALIDAD,CLASE,SERVICIO,TIPO,MODALIDAD,ENFUGA,CODIGO_CAUSA,dias_semana,semanas_mes,mes))
base_final_cat[is.na(base_final_cat)]<-""
base_final_cat <- model.matrix( ~.-1, data=base_final_cat)
base_final_cat <-as.data.frame(base_final_cat)
base_final <- subset(base_final, select = -c(CLASE_ACC,LOCALIDAD,CLASE,SERVICIO,TIPO,MODALIDAD,ENFUGA,CODIGO_CAUSA,TIPO,dias_semana,semanas_mes,mes,moonrise,moonset))
base_final<-cbind(base_final,base_final_cat)
set.seed(420)
sample <- sample(c(TRUE, FALSE), nrow(base_final), replace=TRUE, prob=c(0.7,0.3))
train <- subset(base_final, sample == TRUE)
test <- subset(base_final, sample == FALSE)
library(pacman)
library(haven)
p_load(AER, tidyverse, caret, MLmetrics, tidymodels, themis)
install.packages("recipes", dependencies = TRUE)
train <- recipe(as.factor(fatalidad) ~ .,data = train) %>%
themis::step_smote(fatalidad, over_ratio = 1) %>%
prep() %>%
bake(new_data = NULL)
install.packages("recipes", dependencies = TRUE)
